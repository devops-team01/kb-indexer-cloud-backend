# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Indexer(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: str=None, type: str=None):  # noqa: E501
        """Indexer - a model defined in Swagger

        :param id: The id of this Indexer.  # noqa: E501
        :type id: str
        :param type: The type of this Indexer.  # noqa: E501
        :type type: str
        """
        self.swagger_types = {
            'id': str,
            'type': str
        }

        self.attribute_map = {
            'id': 'id',
            'type': 'type'
        }
        self._id = id
        self._type = type

    @classmethod
    def from_dict(cls, dikt) -> 'Indexer':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Indexer of this Indexer.  # noqa: E501
        :rtype: Indexer
        """
        return util.deserialize_model(dikt, cls)
    
    @classmethod
    def to_dict(self):
            """Converts this instance to a dictionary."""
            result = {}
            for attr, _ in self.swagger_types.items():
                value = getattr(self, attr)
                if isinstance(value, list):
                    result[self.attribute_map[attr]] = list(map(
                        lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                        value
                    ))
                elif hasattr(value, "to_dict"):
                    result[self.attribute_map[attr]] = value.to_dict()
                elif isinstance(value, dict):
                    result[self.attribute_map[attr]] = dict(map(
                        lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item,
                        value.items()
                    ))
                else:
                    result[self.attribute_map[attr]] = value
            return result


    @property
    def id(self) -> str:
        """Gets the id of this Indexer.

        Unique identifier for the indexer  # noqa: E501

        :return: The id of this Indexer.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this Indexer.

        Unique identifier for the indexer  # noqa: E501

        :param id: The id of this Indexer.
        :type id: str
        """

        self._id = id

    @property
    def type(self) -> str:
        """Gets the type of this Indexer.

        Type of the indexer (API, web, notebook, dataset, etc.)  # noqa: E501

        :return: The type of this Indexer.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this Indexer.

        Type of the indexer (API, web, notebook, dataset, etc.)  # noqa: E501

        :param type: The type of this Indexer.
        :type type: str
        """

        self._type = type
