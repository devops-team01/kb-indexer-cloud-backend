# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.job_configuration import JobConfiguration  # noqa: F401,E501
from swagger_server import util


class Job(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, job_id: str=None, job_configuration: JobConfiguration=None, creation_timestamp: datetime=None, status: str=None, generated_command: str=None):  # noqa: E501
        """Job - a model defined in Swagger

        :param job_id: The job_id of this Job.  # noqa: E501
        :type job_id: str
        :param job_configuration: The job_configuration of this Job.  # noqa: E501
        :type job_configuration: JobConfiguration
        :param creation_timestamp: The creation_timestamp of this Job.  # noqa: E501
        :type creation_timestamp: datetime
        :param status: The status of this Job.  # noqa: E501
        :type status: str
        :param generated_command: The generated_command of this Job.  # noqa: E501
        :type generated_command: str
        """
        self.swagger_types = {
            'job_id': str,
            'job_configuration': JobConfiguration,
            'creation_timestamp': datetime,
            'status': str,
            'generated_command': str
        }

        self.attribute_map = {
            'job_id': 'jobId',
            'job_configuration': 'jobConfiguration',
            'creation_timestamp': 'creationTimestamp',
            'status': 'status',
            'generated_command': 'generatedCommand'
        }
        self._job_id = job_id
        self._job_configuration = job_configuration
        self._creation_timestamp = creation_timestamp
        self._status = status
        self._generated_command = generated_command

    @classmethod
    def from_dict(cls, dikt) -> 'Job':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Job of this Job.  # noqa: E501
        :rtype: Job
        """
        return util.deserialize_model(dikt, cls)
    
    @classmethod
    def to_dict(self):
            """Converts this instance to a dictionary."""
            result = {}
            for attr, _ in self.swagger_types.items():
                value = getattr(self, attr)
                if isinstance(value, list):
                    result[self.attribute_map[attr]] = list(map(
                        lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                        value
                    ))
                elif hasattr(value, "to_dict"):
                    result[self.attribute_map[attr]] = value.to_dict()
                elif isinstance(value, dict):
                    result[self.attribute_map[attr]] = dict(map(
                        lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item,
                        value.items()
                    ))
                else:
                    result[self.attribute_map[attr]] = value
            return result


    @property
    def job_id(self) -> str:
        """Gets the job_id of this Job.

        Unique identifier for the job, also used as the database identifier  # noqa: E501

        :return: The job_id of this Job.
        :rtype: str
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id: str):
        """Sets the job_id of this Job.

        Unique identifier for the job, also used as the database identifier  # noqa: E501

        :param job_id: The job_id of this Job.
        :type job_id: str
        """
        if job_id is None:
            raise ValueError("Invalid value for `job_id`, must not be `None`")  # noqa: E501

        self._job_id = job_id

    @property
    def job_configuration(self) -> JobConfiguration:
        """Gets the job_configuration of this Job.


        :return: The job_configuration of this Job.
        :rtype: JobConfiguration
        """
        return self._job_configuration

    @job_configuration.setter
    def job_configuration(self, job_configuration: JobConfiguration):
        """Sets the job_configuration of this Job.


        :param job_configuration: The job_configuration of this Job.
        :type job_configuration: JobConfiguration
        """
        if job_configuration is None:
            raise ValueError("Invalid value for `job_configuration`, must not be `None`")  # noqa: E501

        self._job_configuration = job_configuration

    @property
    def creation_timestamp(self) -> datetime:
        """Gets the creation_timestamp of this Job.

        Timestamp when the job was created  # noqa: E501

        :return: The creation_timestamp of this Job.
        :rtype: datetime
        """
        return self._creation_timestamp

    @creation_timestamp.setter
    def creation_timestamp(self, creation_timestamp: datetime):
        """Sets the creation_timestamp of this Job.

        Timestamp when the job was created  # noqa: E501

        :param creation_timestamp: The creation_timestamp of this Job.
        :type creation_timestamp: datetime
        """

        self._creation_timestamp = creation_timestamp

    @property
    def status(self) -> str:
        """Gets the status of this Job.

        Current status of the job  # noqa: E501

        :return: The status of this Job.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this Job.

        Current status of the job  # noqa: E501

        :param status: The status of this Job.
        :type status: str
        """

        self._status = status

    @property
    def generated_command(self) -> str:
        """Gets the generated_command of this Job.

        The generated command if the job was created with a configuration  # noqa: E501

        :return: The generated_command of this Job.
        :rtype: str
        """
        return self._generated_command

    @generated_command.setter
    def generated_command(self, generated_command: str):
        """Sets the generated_command of this Job.

        The generated command if the job was created with a configuration  # noqa: E501

        :param generated_command: The generated_command of this Job.
        :type generated_command: str
        """

        self._generated_command = generated_command
