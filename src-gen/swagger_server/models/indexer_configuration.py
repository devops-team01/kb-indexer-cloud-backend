# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.indexer import Indexer  # noqa: F401,E501
from swagger_server import util


class IndexerConfiguration(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, indexer: Indexer=None, record: str=None, pipeline: str=None):  # noqa: E501
        """IndexerConfiguration - a model defined in Swagger

        :param indexer: The indexer of this IndexerConfiguration.  # noqa: E501
        :type indexer: Indexer
        :param record: The record of this IndexerConfiguration.  # noqa: E501
        :type record: str
        :param pipeline: The pipeline of this IndexerConfiguration.  # noqa: E501
        :type pipeline: str
        """
        self.swagger_types = {
            'indexer': Indexer,
            'record': str,
            'pipeline': str
        }

        self.attribute_map = {
            'indexer': 'indexer',
            'record': 'record',
            'pipeline': 'pipeline'
        }
        self._indexer = indexer
        self._record = record
        self._pipeline = pipeline

    @classmethod
    def from_dict(cls, dikt) -> 'IndexerConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The IndexerConfiguration of this IndexerConfiguration.  # noqa: E501
        :rtype: IndexerConfiguration
        """
        return util.deserialize_model(dikt, cls)
    
    @classmethod
    def to_dict(self):
            """Converts this instance to a dictionary."""
            result = {}
            for attr, _ in self.swagger_types.items():
                value = getattr(self, attr)
                if isinstance(value, list):
                    result[self.attribute_map[attr]] = list(map(
                        lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                        value
                    ))
                elif hasattr(value, "to_dict"):
                    result[self.attribute_map[attr]] = value.to_dict()
                elif isinstance(value, dict):
                    result[self.attribute_map[attr]] = dict(map(
                        lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item,
                        value.items()
                    ))
                else:
                    result[self.attribute_map[attr]] = value
            return result


    @property
    def indexer(self) -> Indexer:
        """Gets the indexer of this IndexerConfiguration.


        :return: The indexer of this IndexerConfiguration.
        :rtype: Indexer
        """
        return self._indexer

    @indexer.setter
    def indexer(self, indexer: Indexer):
        """Sets the indexer of this IndexerConfiguration.


        :param indexer: The indexer of this IndexerConfiguration.
        :type indexer: Indexer
        """

        self._indexer = indexer

    @property
    def record(self) -> str:
        """Gets the record of this IndexerConfiguration.


        :return: The record of this IndexerConfiguration.
        :rtype: str
        """
        return self._record

    @record.setter
    def record(self, record: str):
        """Sets the record of this IndexerConfiguration.


        :param record: The record of this IndexerConfiguration.
        :type record: str
        """

        self._record = record

    @property
    def pipeline(self) -> str:
        """Gets the pipeline of this IndexerConfiguration.

        Which pipeline to run (search, index, or pipeline)  # noqa: E501

        :return: The pipeline of this IndexerConfiguration.
        :rtype: str
        """
        return self._pipeline

    @pipeline.setter
    def pipeline(self, pipeline: str):
        """Sets the pipeline of this IndexerConfiguration.

        Which pipeline to run (search, index, or pipeline)  # noqa: E501

        :param pipeline: The pipeline of this IndexerConfiguration.
        :type pipeline: str
        """
        allowed_values = ["search", "index", "pipeline"]  # noqa: E501
        if pipeline not in allowed_values:
            raise ValueError(
                "Invalid value for `pipeline` ({0}), must be one of {1}"
                .format(pipeline, allowed_values)
            )

        self._pipeline = pipeline
