# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Record(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: str=None, name: str=None, details: Dict=None):  # noqa: E501
        """Record - a model defined in Swagger

        :param id: The id of this Record.  # noqa: E501
        :type id: str
        :param name: The name of this Record.  # noqa: E501
        :type name: str
        :param details: The details of this Record.  # noqa: E501
        :type details: Dict
        """
        self.swagger_types = {
            'id': str,
            'name': str,
            'details': Dict
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'details': 'details'
        }
        self._id = id
        self._name = name
        self._details = details

    @classmethod
    def from_dict(cls, dikt) -> 'Record':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Record of this Record.  # noqa: E501
        :rtype: Record
        """
        return util.deserialize_model(dikt, cls)
    
    @classmethod
    def to_dict(self):
            """Converts this instance to a dictionary."""
            result = {}
            for attr, _ in self.swagger_types.items():
                value = getattr(self, attr)
                if isinstance(value, list):
                    result[self.attribute_map[attr]] = list(map(
                        lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                        value
                    ))
                elif hasattr(value, "to_dict"):
                    result[self.attribute_map[attr]] = value.to_dict()
                elif isinstance(value, dict):
                    result[self.attribute_map[attr]] = dict(map(
                        lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item,
                        value.items()
                    ))
                else:
                    result[self.attribute_map[attr]] = value
            return result


    @property
    def id(self) -> str:
        """Gets the id of this Record.

        Unique identifier for the record  # noqa: E501

        :return: The id of this Record.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this Record.

        Unique identifier for the record  # noqa: E501

        :param id: The id of this Record.
        :type id: str
        """

        self._id = id

    @property
    def name(self) -> str:
        """Gets the name of this Record.

        Name of the record  # noqa: E501

        :return: The name of this Record.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Record.

        Name of the record  # noqa: E501

        :param name: The name of this Record.
        :type name: str
        """

        self._name = name

    @property
    def details(self) -> Dict:
        """Gets the details of this Record.

        Detailed information about the record  # noqa: E501

        :return: The details of this Record.
        :rtype: Dict
        """
        return self._details

    @details.setter
    def details(self, details: Dict):
        """Sets the details of this Record.

        Detailed information about the record  # noqa: E501

        :param details: The details of this Record.
        :type details: Dict
        """

        self._details = details
