from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class DataSource(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, type=None, description=None):  # noqa: E501
        """DataSource - a model defined in OpenAPI

        :param id: The id of this DataSource.  # noqa: E501
        :type id: str
        :param type: The type of this DataSource.  # noqa: E501
        :type type: str
        :param description: The description of this DataSource.  # noqa: E501
        :type description: str
        """
        self.openapi_types = {
            'id': str,
            'type': str,
            'description': str
        }

        self.attribute_map = {
            'id': 'id',
            'type': 'type',
            'description': 'description'
        }

        self._id = id
        self._type = type
        self._description = description

    @classmethod
    def from_dict(cls, dikt) -> 'DataSource':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DataSource of this DataSource.  # noqa: E501
        :rtype: DataSource
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this DataSource.

        Unique identifier for the data source  # noqa: E501

        :return: The id of this DataSource.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this DataSource.

        Unique identifier for the data source  # noqa: E501

        :param id: The id of this DataSource.
        :type id: str
        """

        self._id = id

    @property
    def type(self) -> str:
        """Gets the type of this DataSource.

        Type of the data source (e.g., Climate_API, Environment_API, etc.)  # noqa: E501

        :return: The type of this DataSource.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this DataSource.

        Type of the data source (e.g., Climate_API, Environment_API, etc.)  # noqa: E501

        :param type: The type of this DataSource.
        :type type: str
        """

        self._type = type

    @property
    def description(self) -> str:
        """Gets the description of this DataSource.

        Description of the data source  # noqa: E501

        :return: The description of this DataSource.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this DataSource.

        Description of the data source  # noqa: E501

        :param description: The description of this DataSource.
        :type description: str
        """

        self._description = description
