from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.indexer_configuration import IndexerConfiguration
from openapi_server import util

from openapi_server.models.indexer_configuration import IndexerConfiguration  # noqa: E501

class JobConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, command=None, indexer_configuration=None, repeat=None):  # noqa: E501
        """JobConfiguration - a model defined in OpenAPI

        :param command: The command of this JobConfiguration.  # noqa: E501
        :type command: str
        :param indexer_configuration: The indexer_configuration of this JobConfiguration.  # noqa: E501
        :type indexer_configuration: IndexerConfiguration
        :param repeat: The repeat of this JobConfiguration.  # noqa: E501
        :type repeat: str
        """
        self.openapi_types = {
            'command': str,
            'indexer_configuration': IndexerConfiguration,
            'repeat': str
        }

        self.attribute_map = {
            'command': 'command',
            'indexer_configuration': 'indexerConfiguration',
            'repeat': 'repeat'
        }

        self._command = command
        self._indexer_configuration = indexer_configuration
        self._repeat = repeat

    @classmethod
    def from_dict(cls, dikt) -> 'JobConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The JobConfiguration of this JobConfiguration.  # noqa: E501
        :rtype: JobConfiguration
        """
        return util.deserialize_model(dikt, cls)

    @property
    def command(self) -> str:
        """Gets the command of this JobConfiguration.

        Shell command used to run the job  # noqa: E501

        :return: The command of this JobConfiguration.
        :rtype: str
        """
        return self._command

    @command.setter
    def command(self, command: str):
        """Sets the command of this JobConfiguration.

        Shell command used to run the job  # noqa: E501

        :param command: The command of this JobConfiguration.
        :type command: str
        """
        if command is None:
            raise ValueError("Invalid value for `command`, must not be `None`")  # noqa: E501

        self._command = command

    @property
    def indexer_configuration(self) -> IndexerConfiguration:
        """Gets the indexer_configuration of this JobConfiguration.


        :return: The indexer_configuration of this JobConfiguration.
        :rtype: IndexerConfiguration
        """
        return self._indexer_configuration

    @indexer_configuration.setter
    def indexer_configuration(self, indexer_configuration: IndexerConfiguration):
        """Sets the indexer_configuration of this JobConfiguration.


        :param indexer_configuration: The indexer_configuration of this JobConfiguration.
        :type indexer_configuration: IndexerConfiguration
        """

        self._indexer_configuration = indexer_configuration

    @property
    def repeat(self) -> str:
        """Gets the repeat of this JobConfiguration.

        Optional field for how often the task should repeat (e.g., hourly, daily, weekly)  # noqa: E501

        :return: The repeat of this JobConfiguration.
        :rtype: str
        """
        return self._repeat

    @repeat.setter
    def repeat(self, repeat: str):
        """Sets the repeat of this JobConfiguration.

        Optional field for how often the task should repeat (e.g., hourly, daily, weekly)  # noqa: E501

        :param repeat: The repeat of this JobConfiguration.
        :type repeat: str
        """

        self._repeat = repeat
