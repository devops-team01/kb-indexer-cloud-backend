from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.data_source import DataSource
from openapi_server.models.indexer import Indexer
from openapi_server.models.record import Record
from openapi_server import util

from openapi_server.models.data_source import DataSource  # noqa: E501
from openapi_server.models.indexer import Indexer  # noqa: E501
from openapi_server.models.record import Record  # noqa: E501

class IndexerConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, indexer=None, data_source=None, record=None, pipeline=None):  # noqa: E501
        """IndexerConfiguration - a model defined in OpenAPI

        :param indexer: The indexer of this IndexerConfiguration.  # noqa: E501
        :type indexer: Indexer
        :param data_source: The data_source of this IndexerConfiguration.  # noqa: E501
        :type data_source: DataSource
        :param record: The record of this IndexerConfiguration.  # noqa: E501
        :type record: Record
        :param pipeline: The pipeline of this IndexerConfiguration.  # noqa: E501
        :type pipeline: str
        """
        self.openapi_types = {
            'indexer': Indexer,
            'data_source': DataSource,
            'record': Record,
            'pipeline': str
        }

        self.attribute_map = {
            'indexer': 'indexer',
            'data_source': 'dataSource',
            'record': 'record',
            'pipeline': 'pipeline'
        }

        self._indexer = indexer
        self._data_source = data_source
        self._record = record
        self._pipeline = pipeline

    @classmethod
    def from_dict(cls, dikt) -> 'IndexerConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The IndexerConfiguration of this IndexerConfiguration.  # noqa: E501
        :rtype: IndexerConfiguration
        """
        return util.deserialize_model(dikt, cls)

    @property
    def indexer(self) -> Indexer:
        """Gets the indexer of this IndexerConfiguration.


        :return: The indexer of this IndexerConfiguration.
        :rtype: Indexer
        """
        return self._indexer

    @indexer.setter
    def indexer(self, indexer: Indexer):
        """Sets the indexer of this IndexerConfiguration.


        :param indexer: The indexer of this IndexerConfiguration.
        :type indexer: Indexer
        """

        self._indexer = indexer

    @property
    def data_source(self) -> DataSource:
        """Gets the data_source of this IndexerConfiguration.


        :return: The data_source of this IndexerConfiguration.
        :rtype: DataSource
        """
        return self._data_source

    @data_source.setter
    def data_source(self, data_source: DataSource):
        """Sets the data_source of this IndexerConfiguration.


        :param data_source: The data_source of this IndexerConfiguration.
        :type data_source: DataSource
        """

        self._data_source = data_source

    @property
    def record(self) -> Record:
        """Gets the record of this IndexerConfiguration.


        :return: The record of this IndexerConfiguration.
        :rtype: Record
        """
        return self._record

    @record.setter
    def record(self, record: Record):
        """Sets the record of this IndexerConfiguration.


        :param record: The record of this IndexerConfiguration.
        :type record: Record
        """

        self._record = record

    @property
    def pipeline(self) -> str:
        """Gets the pipeline of this IndexerConfiguration.

        Which pipeline to run (search, index, or pipeline)  # noqa: E501

        :return: The pipeline of this IndexerConfiguration.
        :rtype: str
        """
        return self._pipeline

    @pipeline.setter
    def pipeline(self, pipeline: str):
        """Sets the pipeline of this IndexerConfiguration.

        Which pipeline to run (search, index, or pipeline)  # noqa: E501

        :param pipeline: The pipeline of this IndexerConfiguration.
        :type pipeline: str
        """
        allowed_values = ["search", "index", "pipeline"]  # noqa: E501
        if pipeline not in allowed_values:
            raise ValueError(
                "Invalid value for `pipeline` ({0}), must be one of {1}"
                .format(pipeline, allowed_values)
            )

        self._pipeline = pipeline
